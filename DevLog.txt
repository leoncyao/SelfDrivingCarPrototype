Self Driving Car Prototype:
	Goals are:	
		Make a working self driving car that can:
			avoid obstacles
			be easily customizable
			rotates and moves toward mouse click
		
		Car has:
			One front Raycasts that detects far away objects
			2 whisker Raycasts that detect close objects (more for turning)
							
So far we have created 2 classes:
	Car
	Main

Need better restoring interpolation formula, as our current one does not reach destination (depends on constant)
could be fixed by updating lastAngle every few seconds to lastTarget

Need to make a front obstacle deviation formula
	Needs to be proportional to:
		distance from car,
		angle between obstacleAngle and lastAngle 
		angle between currentAngle and lastAngle
		
Need Stopping routine
	
Need fields for:
	Forces
	currentAngularAcceleration
	currentAngularVelocity
	currentAngle
	
	
2018-06-09
	Going to work on front obstacle detection formula
	
2018-06-19
	We have written most of the basic implementation. We have a car that moves toward a given target by moving at 
	a constant speed and rotating by a restoring force. The car currently has 2 raycasts that fire at 45 degree angles from the front.
	They detect obstacles and produce forces to avoid such obstacles. However the weights and forces that the raycasts produce are not tuned well
	
	The next phase of the prototype will be to build a machine learning algorithm that optimizes weights
	
    1. The first step will be to randomly assign weights to the raycasts and restoring force
	2. Then we will run the car through a series of tests, computing two costs functions	
		Distance from target
			Measured by the closest distance from the car was from the target
		Number of collisions
			Measured by number of time the car collided with an object	
	(other cost functions will be implemented later like time taken and distance travelled)
	3. Then the given test run will be graded by the cost functions.
	
	4. Repeated steps 1 - 3 many times
	5. Take an average of the trials with the lowest graded cost,
	and repeat the algorithm again, except the weights will be centered around the values of the
	best trials (with 1 standard deviation lets say)
	Instead of taking an avg we might just make several new batches of trials from the previous batch of trials,
	each centered around the nth lowest scorer.
	



Cool ideas for later:
	Having ice on the level that makes cars skid
	Having cars interact with each other
	Having a city type level with grid like streets:
		players would be given a graph of the city with notes representing intersections
		and edges representing streets. The edges would be weighted with times representing the amount
		of time to cross (or avg speed of cars there). The player would be given the option to use
		a shortest path algorithm to go through the fastest streets in the city to reach the destination. 
		This could be more easily visualized with cars moving in each street that block players, and have speeds
		proportional to the edge weights
	Parking level (probably not since nobody likes parking)
	Battle level
	
	Having a Raycast detect moving objects and shifts movement to accommodate. Could be achieve by finding min of distance 
	of paths parameterized by time between Car and object.
	(Meaning see how close they would get given current tragetories) 
	and adjusting while the min dist > collision distance 
	
	Also an outside program where, players can just select cars and have them go to places
	maybe make a small RTS game out of that. 
		
		
		
		
		
		
		
		

	